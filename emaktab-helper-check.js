// –§–∞–π–ª: emaktab-solver.js (–ü–û–õ–ù–ê–Ø –í–ï–†–°–ò–Ø —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π —Ñ–æ—Ä–º—É–ª)

(async function() {
    'use strict';

    console.log('eMaktab Solver Script: –ó–∞–ø—É—â–µ–Ω.');

    // --- –ù–ê–°–¢–†–û–ô–ö–ò ---
    const GEMINI_API_KEY = 'AIzaSyB9vWInkcJrlGJmhRteOSthybGnSDUwfGw'; // !!! –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û –ó–ê–ú–ï–ù–ò –ù–ê –°–í–û–ô –ö–õ–Æ–ß !!!
    const GEMINI_API_URL = `https://generativelanguage.googleapis.com/v1beta/models/gemini-2.5-pro-exp-03-25:generateContent?key=${GEMINI_API_KEY}`;

    // --- –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è UI ---
    let chatWindow = null;
    let fileInput = null;
    let textInput = null;
    let chatOutput = null;
    let sendButton = null;
    let currentImageBase64 = null;

    // --- –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è UI ---

    function createChatUI() {
        if (document.getElementById('emaktab-ai-chat-window')) return; // –£–∂–µ —Å–æ–∑–¥–∞–Ω

        chatWindow = document.createElement('div');
        chatWindow.id = 'emaktab-ai-chat-window';
        // –°—Ç–∏–ª–∏ –¥–ª—è –æ–∫–Ω–∞ —á–∞—Ç–∞ (—Å–¥–µ–ª–∞–π—Ç–µ –µ–≥–æ –º–∞–ª–µ–Ω—å–∫–∏–º –∏ –∞–∫–∫—É—Ä–∞—Ç–Ω—ã–º)
        Object.assign(chatWindow.style, {
            position: 'fixed', bottom: '60px', right: '20px', width: '300px', maxHeight: '400px',
            backgroundColor: 'white', border: '1px solid #ccc', borderRadius: '8px', boxShadow: '0 0 10px rgba(0,0,0,0.1)',
            zIndex: '100000', display: 'flex', flexDirection: 'column', padding: '10px', overflow: 'hidden'
        });

        // –ö–Ω–æ–ø–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è
        const closeButton = document.createElement('button');
        closeButton.textContent = '‚úñ';
        Object.assign(closeButton.style, {
            position: 'absolute', top: '5px', right: '5px', border: 'none', background: 'transparent', cursor: 'pointer', fontSize: '16px'
        });
        closeButton.onclick = () => chatWindow.style.display = 'none';
        chatWindow.appendChild(closeButton);

        chatOutput = document.createElement('div');
        Object.assign(chatOutput.style, {
            flexGrow: '1', overflowY: 'auto', marginBottom: '10px', border: '1px solid #eee', padding: '5px', fontSize: '12px'
        });
        chatOutput.innerHTML = '<i>–ó–∞–≥—Ä—É–∑–∏—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç –∏ –∑–∞–¥–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å.</i>';
        chatWindow.appendChild(chatOutput);

        fileInput = document.createElement('input');
        fileInput.type = 'file';
        fileInput.accept = 'image/*';
        fileInput.style.marginBottom = '5px';
        fileInput.onchange = handleFileSelect;
        chatWindow.appendChild(fileInput);

        textInput = document.createElement('textarea');
        textInput.placeholder = '–í–∞—à –≤–æ–ø—Ä–æ—Å –∫ —Å–∫—Ä–∏–Ω—à–æ—Ç—É (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)';
        textInput.rows = 2;
        Object.assign(textInput.style, {
            width: 'calc(100% - 10px)', marginBottom: '5px', padding: '5px', border: '1px solid #ccc', borderRadius: '4px'
        });
        chatWindow.appendChild(textInput);

        sendButton = document.createElement('button');
        sendButton.textContent = '–û—Ç–ø—Ä–∞–≤–∏—Ç—å Gemini';
        Object.assign(sendButton.style, {
            padding: '8px', backgroundColor: '#673ab7', color: 'white', border: 'none', borderRadius: '4px', cursor: 'pointer'
        });
        sendButton.onclick = handleSendToGemini;
        chatWindow.appendChild(sendButton);

        document.body.appendChild(chatWindow);
        chatWindow.style.display = 'none'; // –°–Ω–∞—á–∞–ª–∞ —Å–∫—Ä—ã—Ç
    }

    function toggleChatWindow() {
        if (!chatWindow) createChatUI();
        chatWindow.style.display = chatWindow.style.display === 'none' ? 'flex' : 'none';
        if (chatWindow.style.display === 'flex') {
            addMessageToChat('<i>–û–∂–∏–¥–∞–Ω–∏–µ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞...</i>', 'system');
        }
    }

    function addMessageToChat(message, sender = 'user') {
        if (!chatOutput) return;
        const messageDiv = document.createElement('div');
        messageDiv.style.marginBottom = '5px';
        messageDiv.style.padding = '3px';
        messageDiv.style.borderRadius = '3px';
        if (sender === 'gemini') {
            messageDiv.style.backgroundColor = '#e1f5fe';
            messageDiv.innerHTML = `<b>Gemini:</b> ${message.replace(/\n/g, '<br>')}`;
        } else if (sender === 'user') {
            messageDiv.style.backgroundColor = '#f0f0f0';
            messageDiv.innerHTML = `<b>–í—ã:</b> ${message}`;
        } else { // system
            messageDiv.innerHTML = `${message}`;
        }
        chatOutput.appendChild(messageDiv);
        chatOutput.scrollTop = chatOutput.scrollHeight; // –ü—Ä–æ–∫—Ä—É—Ç–∫–∞ –≤–Ω–∏–∑
    }

    // --- –õ–æ–≥–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ ---

    function handleFileSelect(event) {
        const file = event.target.files[0];
        if (file && file.type.startsWith('image/')) {
            const reader = new FileReader();
            reader.onload = function(e) {
                currentImageBase64 = e.target.result.split(',')[1]; // –ü–æ–ª—É—á–∞–µ–º —Ç–æ–ª—å–∫–æ Base64 –¥–∞–Ω–Ω—ã–µ
                addMessageToChat('<img src="' + e.target.result + '" style="max-width:100%; max-height:150px;" alt="—Å–∫—Ä–∏–Ω—à–æ—Ç">', 'user-image');
                addMessageToChat('<i>–°–∫—Ä–∏–Ω—à–æ—Ç –∑–∞–≥—Ä—É–∂–µ–Ω. –í–≤–µ–¥–∏—Ç–µ –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ "–û—Ç–ø—Ä–∞–≤–∏—Ç—å".</i>', 'system');
            }
            reader.readAsDataURL(file);
        } else {
            currentImageBase64 = null;
            addMessageToChat('<i>–û—à–∏–±–∫–∞: –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è.</i>', 'system');
        }
    }

    async function handleSendToGemini() {
        if (!currentImageBase64) {
            addMessageToChat('<i>–û—à–∏–±–∫–∞: –°–Ω–∞—á–∞–ª–∞ –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç.</i>', 'system');
            return;
        }
        if (GEMINI_API_KEY === 'YOUR_GEMINI_API_KEY_HERE') {
            alert('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—Å—Ç–∞–≤—å—Ç–µ –≤–∞—à API –∫–ª—é—á Gemini –≤ —Å–∫—Ä–∏–ø—Ç!');
            return;
        }

        const userText = textInput.value.trim();
        let promptForGemini = "–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —ç—Ç–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ.";
        if (userText) {
            promptForGemini = userText + "\n\n–ö–æ–Ω—Ç–µ–∫—Å—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–∏–∂–µ:";
        }
        
        addMessageToChat(userText || '(–û—Ç–ø—Ä–∞–≤–ª–µ–Ω —Ç–æ–ª—å–∫–æ —Å–∫—Ä–∏–Ω—à–æ—Ç)', 'user');
        sendButton.disabled = true;
        sendButton.textContent = '‚è≥ –û—Ç–ø—Ä–∞–≤–∫–∞...';
        chatOutput.scrollTop = chatOutput.scrollHeight;

        const requestBody = {
            contents: [
                {
                    parts: [
                        { text: promptForGemini },
                        {
                            inline_data: {
                                mime_type: "image/png", // –ò–ª–∏ image/jpeg, –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å–∫—Ä–∏–Ω—à–æ—Ç–∞
                                data: currentImageBase64
                            }
                        }
                    ]
                }
            ],
            // generationConfig: { temperature: 0.4, maxOutputTokens: 1024 } // –ú–æ–∂–Ω–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å
        };

        try {
            const response = await fetch(GEMINI_API_URL, {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify(requestBody),
            });

            sendButton.disabled = false;
            sendButton.textContent = '–û—Ç–ø—Ä–∞–≤–∏—Ç—å Gemini';

            if (!response.ok) {
                const errorData = await response.json();
                console.error('Gemini API Error:', response.status, errorData);
                const detailedError = errorData?.error?.message || JSON.stringify(errorData);
                addMessageToChat(`–û–®–ò–ë–ö–ê API ${response.status}: ${detailedError}`, 'gemini');
                return;
            }

            const data = await response.json();
            if (data.candidates && data.candidates[0]?.content?.parts?.[0]) {
                const geminiResponseText = data.candidates[0].content.parts[0].text.trim();
                addMessageToChat(geminiResponseText, 'gemini');
            } else if (data.promptFeedback && data.promptFeedback.blockReason) {
                addMessageToChat(`–ó–ê–ü–†–û–° –ó–ê–ë–õ–û–ö–ò–†–û–í–ê–ù: ${data.promptFeedback.blockReason}`, 'gemini');
            } else {
                addMessageToChat('–ù–µ—Ç –æ—Ç–≤–µ—Ç–∞ –æ—Ç Gemini –∏–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç.', 'gemini');
            }
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ Gemini API:', error);
            sendButton.disabled = false;
            sendButton.textContent = '–û—Ç–ø—Ä–∞–≤–∏—Ç—å Gemini';
            addMessageToChat(`–°–µ—Ç–µ–≤–∞—è –æ—à–∏–±–∫–∞: ${error.message}`, 'gemini');
        }
        // –û—á–∏—Å—Ç–∫–∞ –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
        currentImageBase64 = null;
        fileInput.value = ""; // –°–±—Ä–∞—Å—ã–≤–∞–µ–º input file
        textInput.value = "";
    }


    // --- –°–æ–∑–¥–∞–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–∑–æ–≤–∞ —á–∞—Ç–∞ ---
    const helperButton = document.createElement('button');
    helperButton.textContent = 'üí¨ AI';
    Object.assign(helperButton.style, {
        position: 'fixed', bottom: '20px', right: '20px', zIndex: '99998',
        padding: '8px 12px', backgroundColor: '#007bff', color: 'white',
        border: 'none', borderRadius: '20px', cursor: 'pointer', fontSize: '14px',
        boxShadow: '0 2px 5px rgba(0,0,0,0.2)'
    });
    helperButton.id = 'emaktab-ai-helper-button';
    helperButton.onclick = toggleChatWindow;

    if (!document.getElementById('emaktab-ai-helper-button')) {
        document.body.appendChild(helperButton);
    }
    // –ü–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ UI —á–∞—Ç–∞ (—Å–∫—Ä—ã—Ç–æ–≥–æ)
    createChatUI();

})();
