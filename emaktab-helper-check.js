// –§–∞–π–ª: emaktab-solver.js (–ü–û–õ–ù–ê–Ø –í–ï–†–°–ò–Ø —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π —Ñ–æ—Ä–º—É–ª)

(async function() {
    'use strict';

    console.log('eMaktab Solver Script: –ó–∞–ø—É—â–µ–Ω.');

    // --- –ù–ê–°–¢–†–û–ô–ö–ò ---
    const GEMINI_API_KEY = 'AIzaSyBNzcz0GvXig3ZpJOuEj-KaKJzndiTEWHE'; // !!! –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û –ó–ê–ú–ï–ù–ò –ù–ê –°–í–û–ô –ö–õ–Æ–ß !!!
    const GEMINI_API_URL = `https://generativelanguage.googleapis.com/v1beta/models/gemini-2.5-pro-exp-03-25:generateContent?key=${GEMINI_API_KEY}`;

    // --- –°–µ–ª–µ–∫—Ç–æ—Ä—ã ---
    const QUESTION_BLOCK_SELECTOR = '[data-test-id^="block-"]';
    const LEXICAL_EDITOR_SELECTOR = 'div[data-lexical-editor="true"]';
    const PARAGRAPH_SELECTOR = 'p';
    const TEXT_SPAN_SELECTOR = 'span[data-lexical-text="true"]:not(:empty)';
    const LEXICAL_DECORATOR_SELECTOR = 'span[data-lexical-decorator="true"]';
    
    const TABLE_SELECTOR_IN_BLOCK = 'table';
    const ANSWER_INPUT_SELECTOR = 'input[data-test-id^="answer-"]';
    const DECORATOR_SPAN_WITH_INPUT_SELECTOR_QUERY = `span[data-lexical-decorator="true"]:has(${ANSWER_INPUT_SELECTOR})`;
    
    const MC_OPTION_SELECTOR = 'div[data-test-id^="answer-"]'; 
    const MC_SELECTED_CLASS = 'GmaSD';

    let currentBlockMcOptionElements = null; 

    // --- –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò ---

    function getFormulaTextFromDecorator(decoratorNode) {
        if (!decoratorNode) return "";
        let latexSource = decoratorNode.getAttribute('data-latex') || 
                          decoratorNode.getAttribute('data-katex-source') ||
                          decoratorNode.getAttribute('data-equation');
        if (latexSource) {
             latexSource = latexSource.replace(/\\frac{([^}]+)}{([^}]+)}/g, `($1)/($2)`) 
                                   .replace(/\\cdot/g, '*') .replace(/\\times/g, '*')
                                   .replace(/\\leq/g, '<=').replace(/\\geq/g, '>=')
                                   .replace(/\\neq/g, '!=').replace(/\\pm/g, '¬±')
                                   .replace(/\\ldots/g, '...').replace(/\\sqrt{([^}]+)}/g, 'sqrt($1)')
                                   .replace(/[{}]/g, '').replace(/\\[a-zA-Z]+\s?/g, '');
            return latexSource.trim();
        }
        const imgInside = decoratorNode.querySelector('img');
        if (imgInside && imgInside.getAttribute('alt') && imgInside.getAttribute('alt').trim()) {
            return imgInside.getAttribute('alt').trim();
        }
        const katexHtmlNode = decoratorNode.querySelector('.katex-html[aria-hidden="true"]');
        if (katexHtmlNode) {
            let rawText = katexHtmlNode.innerText.trim();
            rawText = rawText.replace(/‚ãÖ/g, '*') .replace(/‚àí/g, '-').replace(/‚Äì/g, '-').replace(/\s+/g, " "); 
            return rawText; 
        }
        if (decoratorNode.innerText && decoratorNode.innerText.trim()) {
            return decoratorNode.innerText.trim().replace(/\s+/g, " ");
        }
        return "[—Ñ–æ—Ä–º—É–ª–∞]";
    }

    async function askGemini(fullPrompt) {
        const promptLength = fullPrompt.length;
        console.log(`–ü—Ä–æ–º–ø—Ç –¥–ª—è Gemini (–¥–ª–∏–Ω–∞: ${promptLength} —Å–∏–º–≤–æ–ª–æ–≤).`);
        if (promptLength < 2000) console.log("–ü–æ–ª–Ω—ã–π –ø—Ä–æ–º–ø—Ç:", fullPrompt);
        else console.log("–ù–∞—á–∞–ª–æ –ø—Ä–æ–º–ø—Ç–∞ (–ø–µ—Ä–≤—ã–µ 500 —Å–∏–º–≤–æ–ª–æ–≤):", fullPrompt.substring(0, 500));
        if (promptLength > 25000) console.warn(`–ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–ï: –î–ª–∏–Ω–∞ –ø—Ä–æ–º–ø—Ç–∞ (${promptLength}) –æ—á–µ–Ω—å –±–æ–ª—å—à–∞—è!`);
        try {
            const response = await fetch(GEMINI_API_URL, {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({
                    contents: [{ parts: [{ text: fullPrompt }] }],
                     generationConfig: { temperature: 0.3, maxOutputTokens: 1024 } // –ë–æ–ª–µ–µ —Ç–æ—á–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã
                }),
            });
            if (!response.ok) {
                const errorData = await response.json(); console.error('Gemini API Error:', response.status, errorData);
                if (promptLength < 2000) console.error("–ü—Ä–æ–º–ø—Ç, –≤—ã–∑–≤–∞–≤—à–∏–π –æ—à–∏–±–∫—É:", fullPrompt);
                const detailedError = errorData?.error?.message || JSON.stringify(errorData);
                return `–û–®–ò–ë–ö–ê API ${response.status}: ${detailedError}`;
            }
            const data = await response.json();
            if (data.candidates && data.candidates[0]?.content?.parts?.[0]) {
                const geminiResponseText = data.candidates[0].content.parts[0].text.trim();
                console.log("–û—Ç–≤–µ—Ç –æ—Ç Gemini:", geminiResponseText);
                return geminiResponseText;
            } else if (data.promptFeedback && data.promptFeedback.blockReason) {
                console.warn('Gemini API: –ó–∞–ø—Ä–æ—Å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.', data.promptFeedback);
                if (promptLength < 2000) console.warn("–ü—Ä–æ–º–ø—Ç, –≤—ã–∑–≤–∞–≤—à–∏–π –±–ª–æ–∫–∏—Ä–æ–≤–∫—É:", fullPrompt);
                return `–ó–ê–ü–†–û–° –ó–ê–ë–õ–û–ö–ò–†–û–í–ê–ù: ${data.promptFeedback.blockReason}`;
            } else {
                console.warn('Gemini API: –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞.', data); return '–ù–µ—Ç –æ—Ç–≤–µ—Ç–∞ –æ—Ç Gemini';
            }
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ Gemini API:', error);
            if (promptLength < 2000) console.error("–ü—Ä–æ–º–ø—Ç, –ø—Ä–∏ –∫–æ—Ç–æ—Ä–æ–º –ø—Ä–æ–∏–∑–æ—à–ª–∞ —Å–µ—Ç–µ–≤–∞—è –æ—à–∏–±–∫–∞:", fullPrompt);
            return `–°–µ—Ç–µ–≤–∞—è –æ—à–∏–±–∫–∞ Gemini: ${error.message}`;
        }
    }

    function displayAnswer(questionBlockElement, geminiAnswer, answerData) {
        const existingDisplay = questionBlockElement.querySelector('.gemini-answer-display');
        if (existingDisplay) existingDisplay.remove();
        const answerDisplay = document.createElement('div');
        answerDisplay.className = 'gemini-answer-display';
        answerDisplay.style.marginTop = '15px'; answerDisplay.style.padding = '10px';
        answerDisplay.style.border = '1px dashed blue'; answerDisplay.style.backgroundColor = '#f0f8ff';
        answerDisplay.style.whiteSpace = 'pre-wrap';
        answerDisplay.innerHTML = `<strong>ü§ñ Gemini:</strong><br>${geminiAnswer.replace(/\n/g, '<br>')}`;
        const lexicalEditor = questionBlockElement.querySelector(LEXICAL_EDITOR_SELECTOR);
        if (lexicalEditor) lexicalEditor.insertAdjacentElement('afterend', answerDisplay);
        else questionBlockElement.appendChild(answerDisplay);
        if (geminiAnswer.startsWith("–û–®–ò–ë–ö–ê API") || geminiAnswer.startsWith("–ó–ê–ü–†–û–° –ó–ê–ë–õ–û–ö–ò–†–û–í–ê–ù")) return;

        if (answerData.type === 'inputs' && answerData.inputs && answerData.inputs.length > 0) {
            const lines = geminiAnswer.split('\n');
            lines.forEach(line => {
                const match = line.match(/(?:answer-|INPUT\s+)?([a-zA-Z0-9_ -√Ä-√ø]+?)\s*:\s*(.*)/i);
                if (match) {
                    let key = match[1].trim(); const valueToInsert = match[2].trim(); let inputElement;
                    if (/^answer-\d+$/i.test(key) || /^\d+$/.test(key)) {
                        const numMatch = key.match(/\d+$/);
                        if (numMatch) inputElement = questionBlockElement.querySelector(`input[data-test-id="answer-${numMatch[0]}"]`);
                    }
                    if (!inputElement) {
                        const foundInputData = answerData.inputs.find(inp =>
                            (inp.context && inp.context.toLowerCase().includes(key.toLowerCase())) ||
                            (inp.tableContext && inp.tableContext.header.toLowerCase() === key.toLowerCase()) ||
                            (inp.dataTestId && inp.dataTestId.toLowerCase() === key.toLowerCase())
                        );
                         if (foundInputData) inputElement = questionBlockElement.querySelector(`input[data-test-id="${foundInputData.dataTestId}"]`);
                    }
                    if (inputElement) {
                        const nativeInputValueSetter = Object.getOwnPropertyDescriptor(window.HTMLInputElement.prototype, "value").set;
                        nativeInputValueSetter.call(inputElement, valueToInsert);
                        inputElement.dispatchEvent(new Event('focus', { bubbles: true }));
                        inputElement.dispatchEvent(new Event('input', { bubbles: true, inputType: 'insertText' }));
                        inputElement.dispatchEvent(new Event('change', { bubbles: true }));
                        inputElement.style.backgroundColor = 'lightyellow';
                    } else { console.warn(`–ù–µ –Ω–∞–π–¥–µ–Ω input –¥–ª—è –∫–ª—é—á–∞/–º–µ—Ç–∫–∏ "${key}" –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏ –∑–Ω–∞—á–µ–Ω–∏—è "${valueToInsert}".`); }
                }
            });
        } else if (answerData.type === 'multipleChoice' && answerData.options && answerData.options.length > 0) {
            const suggestedAnswerText = geminiAnswer.trim(); let selectedOptionElement = null;
            if (suggestedAnswerText.length === 1 && /[A-Z–ê-–Ø–Å]/i.test(suggestedAnswerText)) {
                const optionIndex = suggestedAnswerText.toUpperCase().charCodeAt(0) - 'A'.charCodeAt(0);
                if (optionIndex >= 0 && optionIndex < answerData.options.length) selectedOptionElement = answerData.options[optionIndex].element;
            }
            if (!selectedOptionElement) {
                for (const opt of answerData.options) {
                    const optTextProcessed = opt.text.replace(/\s+/g, " "); // –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –ø—Ä–æ–±–µ–ª—ã –≤ —Ç–µ–∫—Å—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç–∞
                    const suggAnsProcessed = suggestedAnswerText.replace(/\s+/g, " ");
                    if (optTextProcessed.toLowerCase() === suggAnsProcessed.toLowerCase() ||
                        optTextProcessed.toLowerCase().includes(suggAnsProcessed.toLowerCase()) ||
                        suggAnsProcessed.toLowerCase().includes(optTextProcessed.toLowerCase())) {
                        selectedOptionElement = opt.element; break;
                    }
                }
            }
            if (selectedOptionElement) {
                selectedOptionElement.click(); selectedOptionElement.style.outline = '2px solid green';
                setTimeout(() => {
                    if (selectedOptionElement.classList.contains(MC_SELECTED_CLASS)) console.log(`–ö–ª–∞—Å—Å ${MC_SELECTED_CLASS} —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–º–µ–Ω–µ–Ω –ø–æ—Å–ª–µ –∫–ª–∏–∫–∞.`);
                    else console.warn(`–ö–ª–∞—Å—Å ${MC_SELECTED_CLASS} –ù–ï –ø—Ä–∏–º–µ–Ω–µ–Ω –ø–æ—Å–ª–µ –∫–ª–∏–∫–∞.`);
                }, 200);
            } else { console.warn(`–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –≤–∞—Ä–∏–∞–Ω—Ç –æ—Ç–≤–µ—Ç–∞ –¥–ª—è "${suggestedAnswerText}"`); }
        }
    }

    function extractMainQuestionText(block) {
        const lexicalEditor = block.querySelector(LEXICAL_EDITOR_SELECTOR);
        if (!lexicalEditor) return "";
        let mainQuestionSegments = [];
        const allChildNodesOfEditor = Array.from(lexicalEditor.childNodes);
        for (const childNode of allChildNodesOfEditor) {
            if (childNode.nodeType === Node.ELEMENT_NODE && childNode.matches(PARAGRAPH_SELECTOR)) {
                const p = childNode; let isPartOfOption = false;
                if (currentBlockMcOptionElements && currentBlockMcOptionElements.length > 0) {
                    for (const mcOptEl of currentBlockMcOptionElements) {
                        if (mcOptEl.contains(p) || p.contains(mcOptEl) || mcOptEl === p) { isPartOfOption = true; break; }
                    }
                }
                if (isPartOfOption) continue;
                let pTextContent = "";
                Array.from(p.childNodes).forEach(node => {
                    if (node.nodeType === Node.TEXT_NODE && node.textContent.trim()) {
                        pTextContent += node.textContent.trim() + " ";
                    } else if (node.nodeType === Node.ELEMENT_NODE) {
                        if (node.matches(TEXT_SPAN_SELECTOR)) {
                            let spanIsOptionText = false;
                            if (currentBlockMcOptionElements && currentBlockMcOptionElements.length > 0) {
                                for (const mcOptEl of currentBlockMcOptionElements) {
                                    if (mcOptEl.contains(node)) { spanIsOptionText = true; break; }
                                }
                            }
                            if (!spanIsOptionText) pTextContent += node.innerText.trim() + " ";
                        } else if (node.matches(LEXICAL_DECORATOR_SELECTOR)) {
                            pTextContent += getFormulaTextFromDecorator(node) + " ";
                        } else if (node.tagName === 'BR') { pTextContent += "\n"; }
                    }
                });
                if (pTextContent.trim()) mainQuestionSegments.push(pTextContent.trim());
            } else if (childNode.nodeType === Node.ELEMENT_NODE && childNode.matches(LEXICAL_DECORATOR_SELECTOR)) {
                mainQuestionSegments.push(getFormulaTextFromDecorator(childNode));
            }
        }
        return mainQuestionSegments.join(" ").trim().replace(/\s+\n\s+/g, "\n").replace(/\s+/g, ' ');
    }
    
    function buildPrompt(mainQuestionText, typeData) {
        let prompt = `–í–ê–ñ–ù–û: –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–π –¢–û–õ–¨–ö–û –ö–û–ù–ï–ß–ù–´–ï –û–¢–í–ï–¢–´. –ù–µ –ø–∏—à–∏ –æ–±—ä—è—Å–Ω–µ–Ω–∏–π –∏–ª–∏ –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã—Ö —à–∞–≥–æ–≤.\n`;
        prompt += `–ò–ù–°–¢–†–£–ö–¶–ò–Ø –î–õ–Ø –î–†–û–ë–ï–ô: –ï—Å–ª–∏ –≤ –≤–æ–ø—Ä–æ—Å–µ –∏–ª–∏ –≤–∞—Ä–∏–∞–Ω—Ç–∞—Ö –æ—Ç–≤–µ—Ç–∞ –≤—Å—Ç—Ä–µ—á–∞–µ—Ç—Å—è –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏—è "–ó–ù–ê–ú–ï–ù–ê–¢–ï–õ–¨ –ü–†–û–ë–ï–õ –ß–ò–°–õ–ò–¢–ï–õ–¨" (–Ω–∞–ø—Ä–∏–º–µ—Ä, "79 3"), —ç—Ç–æ –æ–∑–Ω–∞—á–∞–µ—Ç –¥—Ä–æ–±—å "–ß–ò–°–õ–ò–¢–ï–õ–¨/–ó–ù–ê–ú–ï–ù–ê–¢–ï–õ–¨" (—Ç–æ –µ—Å—Ç—å "3/79"). –ü—Ä–∏ –æ—Ç–≤–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑—É–π —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥—Ä–æ–±–∏ "–ß–ò–°–õ–ò–¢–ï–õ–¨/–ó–ù–ê–ú–ï–ù–ê–¢–ï–õ–¨".\n`;
        if (typeData.type === 'table') {
            prompt += `–§–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞: "–ò–º—è_–∫–æ–ª–æ–Ω–∫–∏ –¥–ª—è –ò–º—è_–ø–µ—Ä–≤–æ–≥–æ_—Å—Ç–æ–ª–±—Ü–∞=–∑–Ω–∞—á–µ–Ω–∏–µ: —Ç–≤–æ–π_–æ—Ç–≤–µ—Ç" –∏–ª–∏ "answer-X: —Ç–≤–æ–π_–æ—Ç–≤–µ—Ç".\n\n`;
            prompt += `–ó–ê–î–ê–ù–ò–ï (—Ç–∞–±–ª–∏—Ü–∞):\n–û—Å–Ω–æ–≤–Ω–æ–π –≤–æ–ø—Ä–æ—Å:\n${mainQuestionText}\n–¢–∞–±–ª–∏—Ü–∞ –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è (–ø—Ä–µ–¥–æ—Å—Ç–∞–≤—å –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è —è—á–µ–µ–∫ —Å [INPUT ...]):\n`;
            if (typeData.data.headers && typeData.data.headers.length > 0) {
                prompt += typeData.data.headers.join('\t|\t') + '\n';
                prompt += '-'.repeat(typeData.data.headers.join('\t|\t').length) + '\n';
            }
            typeData.data.rows.forEach((row) => {
                let rowStr = "";
                (typeData.data.headers.length ? typeData.data.headers : Object.keys(row)).forEach(header => {
                    const cellContent = row[header];
                    if (cellContent) {
                        if (cellContent.type === 'input') {
                            rowStr += `[INPUT ${cellContent.dataTestId || 'NO_ID'}]` + '\t|\t';
                        } else { rowStr += (cellContent.value !== undefined ? cellContent.value : '') + '\t|\t'; }
                    } else { rowStr += '' + '\t|\t'; }
                });
                prompt += rowStr.slice(0, -3) + '\n';
            });
        } else if (typeData.type === 'inputs') {
            prompt += `–§–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞: "answer-X: —Ç–≤–æ–π_–æ—Ç–≤–µ—Ç" –∏–ª–∏ "–º–µ—Ç–∫–∞_–ø—É–Ω–∫—Ç–∞: —Ç–≤–æ–π_–æ—Ç–≤–µ—Ç".\n\n`;
            prompt += `–ó–ê–î–ê–ù–ò–ï (—Å–ø–∏—Å–æ–∫ –ø–æ–ª–µ–π –¥–ª—è –≤–≤–æ–¥–∞):\n–û—Å–Ω–æ–≤–Ω–æ–π –≤–æ–ø—Ä–æ—Å:\n${mainQuestionText}\n–û—Ç–≤–µ—Ç—å –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–µ –ø—É–Ω–∫—Ç—ã (–¥–∞–π —Ç–æ–ª—å–∫–æ –∫–æ–Ω–µ—á–Ω—ã–π –æ—Ç–≤–µ—Ç –¥–ª—è –∫–∞–∂–¥–æ–≥–æ [INPUT ...]):\n`;
            typeData.data.forEach(inputData => { prompt += `${inputData.context.trim()} [INPUT ${inputData.dataTestId}]\n`; });
        } else if (typeData.type === 'multipleChoice') {
            prompt += `–§–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞: –£–∫–∞–∂–∏ –¢–û–õ–¨–ö–û –ë–£–ö–í–£ (A, B, C, ...) –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞ –ò–õ–ò –ü–û–õ–ù–´–ô –¢–ï–ö–°–¢ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞ (–µ—Å–ª–∏ —Ç–µ–∫—Å—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç –¥—Ä–æ–±–∏, –∏—Å–ø–æ–ª—å–∑—É–π —Ñ–æ—Ä–º–∞—Ç "–ß–ò–°–õ–ò–¢–ï–õ–¨/–ó–ù–ê–ú–ï–ù–ê–¢–ï–õ–¨").\n\n`;
            prompt += `–ó–ê–î–ê–ù–ò–ï (–≤—ã–±–µ—Ä–∏ –æ–¥–∏–Ω –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç):\n–û—Å–Ω–æ–≤–Ω–æ–π –≤–æ–ø—Ä–æ—Å:\n${mainQuestionText}\n–í–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤ (–ø–æ–º–Ω–∏ –ø—Ä–æ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é –¥–ª—è –¥—Ä–æ–±–µ–π):\n`;
            typeData.data.forEach((opt, i) => {
                prompt += `${String.fromCharCode(65 + i)}. ${opt.text}\n`;
            });
        }
        prompt += "\n–ü–û–ú–ù–ò: –¢–û–õ–¨–ö–û –ö–û–ù–ï–ß–ù–´–ô –û–¢–í–ï–¢.\n";
        return prompt;
    }

    async function processQuestionsOnPage() {
        const questionBlocks = document.querySelectorAll(QUESTION_BLOCK_SELECTOR);
        if (questionBlocks.length === 0) {
            console.log('eMaktab Solver: –ë–ª–æ–∫–∏ –≤–æ–ø—Ä–æ—Å–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.'); alert('–ë–ª–æ–∫–∏ –≤–æ–ø—Ä–æ—Å–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.');
            solveButton.textContent = 'üîÆ –†–µ—à–∏—Ç—å —Å Gemini'; solveButton.disabled = false; return;
        }
        console.log(`eMaktab Solver: –ù–∞–π–¥–µ–Ω–æ –±–ª–æ–∫–æ–≤ –≤–æ–ø—Ä–æ—Å–æ–≤: ${questionBlocks.length}. –û–±—Ä–∞–±–æ—Ç–∫–∞...`);
        solveButton.textContent = `‚è≥ –û–±—Ä–∞–±–æ—Ç–∫–∞ (0/${questionBlocks.length})...`;
        let questionCounter = 0;
        for (const block of questionBlocks) {
            questionCounter++; const blockId = block.getAttribute('data-test-id');
            console.log(`\n--- –û–±—Ä–∞–±–æ—Ç–∫–∞ –±–ª–æ–∫–∞ #${questionCounter} (data-test-id: ${blockId}) ---`);
            solveButton.textContent = `‚è≥ –û–±—Ä–∞–±–æ—Ç–∫–∞ (${questionCounter}/${questionBlocks.length})...`;
            currentBlockMcOptionElements = Array.from(block.querySelectorAll(MC_OPTION_SELECTOR));
            const mainQuestionText = extractMainQuestionText(block);
            const actualMcOptionElements = currentBlockMcOptionElements;
            const tableElement = block.querySelector(TABLE_SELECTOR_IN_BLOCK);
            const inputFields = Array.from(block.querySelectorAll(ANSWER_INPUT_SELECTOR));
            let tableData = null; let nonTableInputsData = []; let mcOptionsData = [];
            let allInputsForDisplay = { type: null, inputs: [], options: [] }; let hasInteractiveElements = false;

            if (tableElement && inputFields.some(inp => tableElement.contains(inp))) {
                console.log(`   –ë–ª–æ–∫ ${blockId} —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–∞–±–ª–∏—Ü—É —Å –ø–æ–ª—è–º–∏ –≤–≤–æ–¥–∞.`);
                tableData = { headers: [], rows: [] };
                const rows = Array.from(tableElement.querySelectorAll('tr'));
                if (rows.length > 0) {
                    const headerRow = rows[0]; const headerCells = Array.from(headerRow.querySelectorAll('th, td'));
                    tableData.headers = headerCells.map(cell => (cell.innerText || "").trim()).filter(h => h);
                    if (tableData.headers.length === 0 && headerCells.length > 0) tableData.headers = headerCells.map((_, i) => `–ö–æ–ª–æ–Ω–∫–∞ ${i + 1}`);
                    const dataRows = rows.slice(1);
                    dataRows.forEach(dataRow => {
                        const cells = Array.from(dataRow.querySelectorAll('td')); const rowData = {};
                        let rhInput = false, rhData = false;
                        const currentHeaders = tableData.headers.length ? tableData.headers : cells.map((_,i) => `–ö–æ–ª–æ–Ω–∫–∞ ${i+1}`);
                        currentHeaders.forEach((header, cellIndex) => {
                            const cell = cells[cellIndex];
                            const fcv = cellIndex === 0 ? (cell ? (cell.innerText || "").trim() : '') : (cells[0] ? (cells[0].innerText || "").trim() : '');
                            if (!cell) { rowData[header] = { type: 'data', value: '(–Ω–µ—Ç)' }; return; }
                            const inputField = cell.querySelector(ANSWER_INPUT_SELECTOR);
                            if (inputField) {
                                rhInput = true; const iInfo = { type: 'input', dataTestId: inputField.getAttribute('data-test-id'), placeholder: inputField.getAttribute('placeholder'), tableContext: { header: header, firstColValue: fcv } };
                                rowData[header] = iInfo; allInputsForDisplay.inputs.push(iInfo);
                            } else {
                                const ct = (cell.innerText || "").trim(); rowData[header] = { type: 'data', value: ct || '(–ø—É—Å—Ç–æ)' };
                                if (ct && ct !== '(–ø—É—Å—Ç–æ)') rhData = true;
                            }
                        });
                        if(rhInput || rhData) tableData.rows.push(rowData);
                    });
                }
                if (tableData.rows.some(r => Object.values(r).some(cell => cell.type === 'input'))) hasInteractiveElements = true;
                else tableData = null;
            }

            const nonTableInpFields = inputFields.filter(inp => !allInputsForDisplay.inputs.some(ex => ex.dataTestId === inp.getAttribute('data-test-id')));
            if (nonTableInpFields.length > 0) {
                console.log(`   –ë–ª–æ–∫ ${blockId} –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è –∫–∞–∫ —Å–ø–∏—Å–æ–∫ –ø–æ–ª–µ–π –≤–≤–æ–¥–∞.`);
                const allLexParas = Array.from(block.querySelectorAll(`${LEXICAL_EDITOR_SELECTOR} > ${PARAGRAPH_SELECTOR}`));
                nonTableInpFields.forEach(inputEl => {
                    const dId = inputEl.getAttribute('data-test-id'); let ctx = ""; const pPWI = inputEl.closest(PARAGRAPH_SELECTOR);
                    if (pPWI) {
                        let pTxtBeforeInp = "";
                        for (const cN of pPWI.childNodes) {
                            if (cN.nodeType === Node.ELEMENT_NODE && cN.matches(DECORATOR_SPAN_WITH_INPUT_SELECTOR_QUERY)) break;
                            if (cN.textContent.trim()) pTxtBeforeInp += cN.textContent.trim() + " ";
                        }
                        if (pTxtBeforeInp.trim()) ctx += `${pTxtBeforeInp.trim()} `;
                        const idxOfPP = allLexParas.indexOf(pPWI);
                        if (idxOfPP > 0) {
                            for (let i = idxOfPP - 1; i >= 0; i--) {
                                const pP = allLexParas[i];
                                if (pP.querySelector(ANSWER_INPUT_SELECTOR) || !pP.innerText.trim() || (mainQuestionText && mainQuestionText.includes(pP.innerText.trim()))) break;
                                if (!pP.querySelector(DECORATOR_SPAN_SELECTOR)) { ctx = `${pP.innerText.trim()} ` + ctx; break; }
                            }
                        }
                    }
                    nonTableInputsData.push({ dataTestId: dId, context: ctx || "(–Ω–µ—Ç)" });
                    allInputsForDisplay.inputs.push({dataTestId: dId, context: ctx || "(–Ω–µ—Ç)", type: 'input'});
                });
                if (nonTableInputsData.length > 0) hasInteractiveElements = true;
            }
            if (allInputsForDisplay.inputs.length > 0 && !allInputsForDisplay.type) allInputsForDisplay.type = 'inputs';

            if (!hasInteractiveElements && actualMcOptionElements.length > 0) {
                console.log(`   –ë–ª–æ–∫ ${blockId} –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è –∫–∞–∫ –≤–æ–ø—Ä–æ—Å —Å –≤—ã–±–æ—Ä–æ–º –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤.`);
                const opts = actualMcOptionElements.map(oEl => {
                    let combOptTxt = "";
                    Array.from(oEl.childNodes).forEach(cN => {
                        if (cN.nodeType === Node.TEXT_NODE && cN.textContent.trim()) combOptTxt += cN.textContent.trim() + " ";
                        else if (cN.nodeType === Node.ELEMENT_NODE) {
                            if (cN.matches(TEXT_SPAN_SELECTOR)) combOptTxt += cN.innerText.trim() + " ";
                            else if (cN.matches(LEXICAL_DECORATOR_SELECTOR)) combOptTxt += getFormulaTextFromDecorator(cN) + " ";
                            else if (cN.querySelector(TEXT_SPAN_SELECTOR) || cN.querySelector(LEXICAL_DECORATOR_SELECTOR)) {
                                 Array.from(cN.querySelectorAll(`${TEXT_SPAN_SELECTOR}, ${LEXICAL_DECORATOR_SELECTOR}`)).forEach(iN => {
                                     if (iN.matches(TEXT_SPAN_SELECTOR)) combOptTxt += iN.innerText.trim() + " ";
                                    else if (iN.matches(LEXICAL_DECORATOR_SELECTOR)) combOptTxt += getFormulaTextFromDecorator(iN) + " ";
                                 });
                            }
                        }
                    });
                    return { text: combOptTxt.trim().replace(/\s+/g, ' ') || "(–Ω–µ—Ç)", element: oEl, dataTestId: oEl.getAttribute('data-test-id') };
                });
                if (opts.some(o => o.text && o.text !== "(–Ω–µ—Ç)")) {
                    mcOptionsData = opts; allInputsForDisplay = { type: 'multipleChoice', options: mcOptionsData, inputs: [] };
                    hasInteractiveElements = true;
                } else { console.warn(`   –ë–ª–æ–∫ ${blockId}: –Ω–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å —Ç–µ–∫—Å—Ç –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤.`); }
            }

            if (!hasInteractiveElements) {
                console.log(`   –ë–ª–æ–∫ ${blockId} –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º.`);
                displayAnswer(block, "(–≠—Ç–æ—Ç –±–ª–æ–∫ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –¥–ª—è —Ä–µ—à–µ–Ω–∏—è)", {type: null});
                if (questionCounter < questionBlocks.length) await new Promise(resolve => setTimeout(resolve, 50));
                continue;
            }
            const currMainQTxt = mainQuestionText || "(–ù–µ—Ç –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ –≤–æ–ø—Ä–æ—Å–∞)";
            let promptDataPayload;
            if (allInputsForDisplay.type === 'multipleChoice') promptDataPayload = { type: 'multipleChoice', data: mcOptionsData };
            else if (tableData && tableData.rows.some(r => Object.values(r).some(cell => cell.type === 'input'))) promptDataPayload = { type: 'table', data: tableData };
            else if (nonTableInputsData.length > 0 || allInputsForDisplay.inputs.length > 0) promptDataPayload = { type: 'inputs', data: nonTableInputsData.length > 0 ? nonTableInputsData : allInputsForDisplay.inputs };
            else {
                 console.warn(`   –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ç–∏–ø –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø—Ä–æ–º–ø—Ç–∞ –±–ª–æ–∫–∞ ${blockId}. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º.`);
                 if (questionCounter < questionBlocks.length) await new Promise(resolve => setTimeout(resolve, 50));
                 continue;
            }
            const prompt = buildPrompt(currMainQTxt, promptDataPayload);
            const geminiAnswer = await askGemini(prompt);
            displayAnswer(block, geminiAnswer, allInputsForDisplay);
            if (questionCounter < questionBlocks.length) await new Promise(resolve => setTimeout(resolve, 1000));
        }
        console.log('eMaktab Solver: –í—Å–µ –≤–æ–ø—Ä–æ—Å—ã –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã.');
        solveButton.textContent = '‚úÖ –ì–æ—Ç–æ–≤–æ! –†–µ—à–∏—Ç—å —Å–Ω–æ–≤–∞?'; solveButton.disabled = false;
    }

    const solveButton = document.createElement('button');
    solveButton.textContent = 'üîÆ –†–µ—à–∏—Ç—å —Å Gemini';
    solveButton.style.position = 'fixed'; solveButton.style.bottom = '20px'; solveButton.style.right = '20px';
    solveButton.style.zIndex = '99999'; solveButton.style.padding = '12px 20px';
    solveButton.style.backgroundColor = '#673ab7'; solveButton.style.color = 'white';
    solveButton.style.border = 'none'; solveButton.style.borderRadius = '8px';
    solveButton.style.cursor = 'pointer'; solveButton.style.fontSize = '16px';
    solveButton.style.boxShadow = '0 4px 8px rgba(0,0,0,0.2)'; solveButton.id = 'gemini-solve-button';
    solveButton.addEventListener('click', async () => {
        if (GEMINI_API_KEY === 'YOUR_GEMINI_API_KEY_HERE') {
            alert('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—Å—Ç–∞–≤—å—Ç–µ –≤–∞—à API –∫–ª—é—á Gemini –≤ —Å–∫—Ä–∏–ø—Ç!'); return;
        }
        solveButton.disabled = true; solveButton.textContent = '‚è≥ –ó–∞–≥—Ä—É–∑–∫–∞...';
        await processQuestionsOnPage();
    });
    if (!document.getElementById('gemini-solve-button')) document.body.appendChild(solveButton);
})();
