// –§–∞–π–ª: emaktab-solver.js
// –ü–æ–º–µ—Å—Ç–∏—Ç–µ —ç—Ç–æ—Ç —Ñ–∞–π–ª –≤ –≤–∞—à GitHub —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π

(async function() {
    'use strict';

    console.log('eMaktab Solver Script: –ó–∞–ø—É—â–µ–Ω.');

    // --- –ù–ê–°–¢–†–û–ô–ö–ò ---
    const GEMINI_API_KEY = 'AIzaSyB9vWInkcJrlGJmhRteOSthybGnSDUwfGw'; // !!! –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û –ó–ê–ú–ï–ù–ò –ù–ê –°–í–û–ô –ö–õ–Æ–ß !!!
    const GEMINI_API_URL = `https://generativelanguage.googleapis.com/v1beta/models/gemini-2.5-pro-exp-03-25:generateContent?key=${GEMINI_API_KEY}`; // !!!!!!!!!!!

    // --- –°–µ–ª–µ–∫—Ç–æ—Ä—ã ---
    const QUESTION_BLOCK_SELECTOR = '[data-test-id^="block-"]';
    const LEXICAL_EDITOR_SELECTOR = 'div[data-lexical-editor="true"]';
    const PARAGRAPH_SELECTOR = 'p';
    const TEXT_SPAN_SELECTOR = 'span[data-lexical-text="true"]:not(:empty)';
    const TABLE_SELECTOR_IN_BLOCK = 'table';
    const ANSWER_INPUT_SELECTOR = 'input[data-test-id^="answer-"]';
    const DECORATOR_SPAN_WITH_INPUT_SELECTOR_QUERY = `span[data-lexical-decorator="true"]:has(${ANSWER_INPUT_SELECTOR})`;
    const DECORATOR_SPAN_SELECTOR = 'span[data-lexical-decorator="true"]';

    // --- –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò ---

    async function askGemini(fullPrompt) {
    console.log("–ü—Ä–æ–º–ø—Ç –¥–ª—è Gemini (–¥–ª–∏–Ω–∞: " + fullPrompt.length + " —Å–∏–º–≤–æ–ª–æ–≤):", fullPrompt); // –î–æ–±–∞–≤–∏–º –¥–ª–∏–Ω—É –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    try {
        const response = await fetch(GEMINI_API_URL, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                contents: [{ parts: [{ text: fullPrompt }] }],
                generationConfig: {
                    temperature: 0.3,     // –û—Å—Ç–∞–≤–∏–º —á—É—Ç—å –ø–æ–Ω–∏–∂–µ –¥–ª—è —Ç–æ—á–Ω–æ—Å—Ç–∏
                    maxOutputTokens: 1000, // –£–≤–µ–ª–∏—á–∏–º, —á—Ç–æ–±—ã —Ç–æ—á–Ω–æ —Ö–≤–∞—Ç–∏–ª–æ –º–µ—Å—Ç–∞ –¥–ª—è –æ—Ç–≤–µ—Ç–∞
                    // stopSequences: []  // –ü–æ–∫–∞ —É–±–µ—Ä–µ–º, —á—Ç–æ–±—ã –Ω–µ –º–µ—à–∞–ª–∏
                }
            }),
        });

            if (!response.ok) {
                const errorData = await response.json();
                console.error('Gemini API Error:', response.status, errorData);
                const detailedError = errorData?.error?.message || JSON.stringify(errorData);
                return `–û–®–ò–ë–ö–ê API ${response.status}: ${detailedError}`;
            }

            const data = await response.json();
            if (data.candidates && data.candidates.length > 0 &&
                data.candidates[0].content && data.candidates[0].content.parts &&
                data.candidates[0].content.parts.length > 0) {
                return data.candidates[0].content.parts[0].text.trim();
            } else if (data.promptFeedback && data.promptFeedback.blockReason) {
                console.warn('Gemini API: –ó–∞–ø—Ä–æ—Å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.', data.promptFeedback);
                return `–ó–ê–ü–†–û–° –ó–ê–ë–õ–û–ö–ò–†–û–í–ê–ù: ${data.promptFeedback.blockReason}`;
            } else {
                console.warn('Gemini API: –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞.', data);
                return '–ù–µ—Ç –æ—Ç–≤–µ—Ç–∞ –æ—Ç Gemini';
            }
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ Gemini API:', error);
            return `–°–µ—Ç–µ–≤–∞—è –æ—à–∏–±–∫–∞ Gemini: ${error.message}`;
        }
    }

    function displayAnswer(questionBlockElement, geminiAnswer, answerInputsData = []) {
        const existingDisplay = questionBlockElement.querySelector('.gemini-answer-display');
        if (existingDisplay) {
            existingDisplay.remove();
        }

        const answerDisplay = document.createElement('div');
        answerDisplay.className = 'gemini-answer-display';
        answerDisplay.style.marginTop = '15px';
        answerDisplay.style.padding = '10px';
        answerDisplay.style.border = '1px dashed blue';
        answerDisplay.style.backgroundColor = '#f0f8ff';
        answerDisplay.style.whiteSpace = 'pre-wrap';
        answerDisplay.innerHTML = `<strong>ü§ñ Gemini:</strong><br>${geminiAnswer.replace(/\n/g, '<br>')}`;
        
        const lexicalEditor = questionBlockElement.querySelector(LEXICAL_EDITOR_SELECTOR);
        if (lexicalEditor) {
            lexicalEditor.insertAdjacentElement('afterend', answerDisplay);
        } else {
            questionBlockElement.appendChild(answerDisplay);
        }

        if (answerInputsData.length > 0 && geminiAnswer && !geminiAnswer.startsWith("–û–®–ò–ë–ö–ê API") && !geminiAnswer.startsWith("–ó–ê–ü–†–û–° –ó–ê–ë–õ–û–ö–ò–†–û–í–ê–ù")) {
            const lines = geminiAnswer.split('\n');
            lines.forEach(line => {
                const match = line.match(/(?:answer-|INPUT\s+)([a-zA-Z0-9_-]+)\s*:\s*(.*)/i);
                if (match) {
                    const dataTestId = "answer-" + match[1].replace(/^answer-/i, '');
                    const valueToInsert = match[2].trim();
                    const inputElement = questionBlockElement.querySelector(`input[data-test-id="${dataTestId}"]`);
                    
                    if (inputElement) {
                        console.log(`–ü–æ–ø—ã—Ç–∫–∞ –≤—Å—Ç–∞–≤–∏—Ç—å "${valueToInsert}" –≤ input[data-test-id="${dataTestId}"]`);
                        
                        // –ò–ó–ú–ï–ù–ï–ù–ò–ï –ó–î–ï–°–¨: –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞—Ç–∏–≤–Ω—ã–π —Å–µ—Ç—Ç–µ—Ä –∏ –∏–º–∏—Ç–∏—Ä—É–µ–º –±–æ–ª—å—à–µ —Å–æ–±—ã—Ç–∏–π
                        const nativeInputValueSetter = Object.getOwnPropertyDescriptor(window.HTMLInputElement.prototype, "value").set;
                        nativeInputValueSetter.call(inputElement, valueToInsert);

                        inputElement.dispatchEvent(new Event('focus', { bubbles: true }));
                        inputElement.dispatchEvent(new Event('input', { bubbles: true, inputType: 'insertText' }));
                        inputElement.dispatchEvent(new Event('change', { bubbles: true }));
                        // inputElement.dispatchEvent(new Event('blur', { bubbles: true })); // –ú–æ–∂–Ω–æ —Ä–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–ª—è —Ç–µ—Å—Ç–∞

                        inputElement.style.backgroundColor = 'lightyellow';
                    } else {
                        console.warn(`–ù–µ –Ω–∞–π–¥–µ–Ω input –¥–ª—è data-test-id="${dataTestId}" –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏ –∑–Ω–∞—á–µ–Ω–∏—è.`);
                    }
                }
            });
        }
    }

    function extractMainQuestionText(block) {
        // ... (–∫–æ–¥ extractMainQuestionText –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
        const lexicalEditor = block.querySelector(LEXICAL_EDITOR_SELECTOR);
        if (!lexicalEditor) return "";
        let mainQuestionSegments = [];
        const paragraphs = lexicalEditor.querySelectorAll(PARAGRAPH_SELECTOR);
        for (const p of paragraphs) {
            if (p.querySelector(ANSWER_INPUT_SELECTOR) ||
                (p.innerText.trim().startsWith("–û—Ç–≤–µ—Ç:") && p.querySelector(DECORATOR_SPAN_SELECTOR)) ||
                (/^\d+\)/.test(p.innerText.trim()) && p.querySelector(DECORATOR_SPAN_SELECTOR))
               ) {
                break; 
            }
            const textSpans = p.querySelectorAll(TEXT_SPAN_SELECTOR);
            textSpans.forEach(span => mainQuestionSegments.push(span.innerText.trim()));
        }
        return mainQuestionSegments.join(" ").trim();
    }

    function buildPrompt(mainQuestionText, tableData, nonTableInputsData) {
    let prompt = `–í–ê–ñ–ù–û: –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–π –¢–û–õ–¨–ö–û –ö–û–ù–ï–ß–ù–´–ï –û–¢–í–ï–¢–´. –ù–µ –≤–∫–ª—é—á–∞–π –≤ –æ—Ç–≤–µ—Ç –Ω–∏–∫–∞–∫–∏—Ö –æ–±—ä—è—Å–Ω–µ–Ω–∏–π, —Ä–∞—Å—Å—É–∂–¥–µ–Ω–∏–π –∏–ª–∏ –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã—Ö —à–∞–≥–æ–≤.
–ï—Å–ª–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è —á–∏—Å–ª–æ–≤–æ–π –æ—Ç–≤–µ—Ç, –¥–∞–π —Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ. –ï—Å–ª–∏ –¥—Ä–æ–±—å - —Ç–æ–ª—å–∫–æ –¥—Ä–æ–±—å (–Ω–∞–ø—Ä–∏–º–µ—Ä, 3/40).

–§–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞:
–î–ª—è —Ç–∞–±–ª–∏—Ü: "–ò–º—è_–∫–æ–ª–æ–Ω–∫–∏ –¥–ª—è –ò–º—è_–ø–µ—Ä–≤–æ–≥–æ_—Å—Ç–æ–ª–±—Ü–∞=–∑–Ω–∞—á–µ–Ω–∏–µ: —Ç–≤–æ–π_–æ—Ç–≤–µ—Ç" (–µ—Å–ª–∏ –µ—Å—Ç—å –ø–µ—Ä–≤—ã–π —Å—Ç–æ–ª–±–µ—Ü —Å –¥–∞–Ω–Ω—ã–º–∏) –ò–õ–ò "answer-X: —Ç–≤–æ–π_–æ—Ç–≤–µ—Ç" (–µ—Å–ª–∏ —ç—Ç–æ –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω–æ–µ –ø–æ–ª–µ –≤ —Å—Ç—Ä–æ–∫–µ/–≤–æ–ø—Ä–æ—Å–µ).
–î–ª—è –Ω–µ—Ç–∞–±–ª–∏—á–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤: "answer-X: —Ç–≤–æ–π_–æ—Ç–≤–µ—Ç" –ò–õ–ò "–º–µ—Ç–∫–∞_–ø—É–Ω–∫—Ç–∞: —Ç–≤–æ–π_–æ—Ç–≤–µ—Ç".

–ü—Ä–∏–º–µ—Ä—ã –∂–µ–ª–∞–µ–º–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞ –æ—Ç–≤–µ—Ç–∞:
answer-1: 28672
answer-2: 5880
W –¥–ª—è x=5: 1/20
n –¥–ª—è x=6: 4
–°—Ä–µ–¥–Ω–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: 25

---
–ó–ê–î–ê–ù–ò–ï:
–û—Å–Ω–æ–≤–Ω–æ–π –≤–æ–ø—Ä–æ—Å:
${mainQuestionText}
\n`;

    if (tableData && tableData.rows && tableData.rows.length > 0) {
        prompt += "\n–¢–∞–±–ª–∏—Ü–∞ –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è:\n";
        if (tableData.headers && tableData.headers.length > 0) {
            prompt += tableData.headers.join('\t|\t') + '\n';
            prompt += '-'.repeat(tableData.headers.join('\t|\t').length) + '\n';
        }
        
        tableData.rows.forEach((row, rowIndex) => {
            let rowStr = "";
            const firstColHeader = tableData.headers.length ? tableData.headers[0] : null;
            const firstColDataCell = firstColHeader ? row[firstColHeader] : null;
            const firstColValue = (firstColDataCell && firstColDataCell.type === 'data' && firstColDataCell.value !== '(–ø—É—Å—Ç–æ)') ? firstColDataCell.value : null;

            (tableData.headers.length ? tableData.headers : Object.keys(row)).forEach(header => {
                const cellContent = row[header]; 
                if (cellContent) { 
                    if (cellContent.type === 'input') {
                        let inputLabel = `[INPUT ${cellContent.dataTestId || 'NO_ID'}]`;
                        if (firstColValue && header !== firstColHeader) { // –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç, –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ –ø–µ—Ä–≤–∞—è –∫–æ–ª–æ–Ω–∫–∞
                            inputLabel = `[${header} –¥–ª—è ${firstColHeader}=${firstColValue} (INPUT ${cellContent.dataTestId || 'NO_ID'})]`;
                        }
                        rowStr += inputLabel + '\t|\t';
                    } else {
                        rowStr += (cellContent.value !== undefined ? cellContent.value : '(–ø—É—Å—Ç–æ)') + '\t|\t';
                    }
                } else {
                    rowStr += '(–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ –∑–∞–≥–æ–ª–æ–≤–∫—É)' + '\t|\t'; 
                }
            });
            prompt += rowStr.slice(0, -3) + '\n'; 
        });
        prompt += "\n–ü—Ä–µ–¥–æ—Å—Ç–∞–≤—å –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è –≤—Å–µ—Ö —è—á–µ–µ–∫ [INPUT ...].\n";

    } else if (nonTableInputsData.length > 0) {
        prompt += "\n–û—Ç–≤–µ—Ç—å –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–µ –ø—É–Ω–∫—Ç—ã (–¥–∞–π —Ç–æ–ª—å–∫–æ –∫–æ–Ω–µ—á–Ω—ã–π –æ—Ç–≤–µ—Ç –¥–ª—è –∫–∞–∂–¥–æ–≥–æ INPUT):\n";
        nonTableInputsData.forEach(inputData => {
            prompt += `${inputData.context.trim()} [INPUT ${inputData.dataTestId}]\n`;
        });
        prompt += "\n–ü—Ä–µ–¥–æ—Å—Ç–∞–≤—å –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è –≤—Å–µ—Ö [INPUT ...].\n";
    }
    prompt += "\n–ü–û–ú–ù–ò: –¢–û–õ–¨–ö–û –ö–û–ù–ï–ß–ù–´–ï –û–¢–í–ï–¢–´, –ë–ï–ó –û–ë–™–Ø–°–ù–ï–ù–ò–ô –ò –ü–†–û–ú–ï–ñ–£–¢–û–ß–ù–´–• –®–ê–ì–û–í.\n"; // –ï—â–µ –æ–¥–Ω–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
    return prompt;
}

    async function processQuestionsOnPage() {
        // ... (–∫–æ–¥ processQuestionsOnPage –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
        const questionBlocks = document.querySelectorAll(QUESTION_BLOCK_SELECTOR);
        if (questionBlocks.length === 0) {
            console.log('eMaktab Solver: –ë–ª–æ–∫–∏ –≤–æ–ø—Ä–æ—Å–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.');
            alert('–ë–ª–æ–∫–∏ –≤–æ–ø—Ä–æ—Å–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã –≤ —Å–∫—Ä–∏–ø—Ç–µ.');
            solveButton.textContent = 'üîÆ –†–µ—à–∏—Ç—å —Å Gemini';
            solveButton.disabled = false;
            return;
        }
        console.log(`eMaktab Solver: –ù–∞–π–¥–µ–Ω–æ –±–ª–æ–∫–æ–≤ –≤–æ–ø—Ä–æ—Å–æ–≤: ${questionBlocks.length}. –û–±—Ä–∞–±–æ—Ç–∫–∞...`);
        solveButton.textContent = `‚è≥ –û–±—Ä–∞–±–æ—Ç–∫–∞ (0/${questionBlocks.length})...`;
        let questionCounter = 0;
        for (const block of questionBlocks) {
            questionCounter++;
            const blockId = block.getAttribute('data-test-id');
            console.log(`\n--- –û–±—Ä–∞–±–æ—Ç–∫–∞ –±–ª–æ–∫–∞ #${questionCounter} (data-test-id: ${blockId}) ---`);
            solveButton.textContent = `‚è≥ –û–±—Ä–∞–±–æ—Ç–∫–∞ (${questionCounter}/${questionBlocks.length})...`;
            const mainQuestionText = extractMainQuestionText(block);
            const tableElement = block.querySelector(TABLE_SELECTOR_IN_BLOCK);
            const answerInputs = Array.from(block.querySelectorAll(ANSWER_INPUT_SELECTOR));
            let tableData = null;
            let nonTableInputsData = [];
            let allInputsForDisplay = [];
            if (!mainQuestionText && answerInputs.length === 0 && !tableElement) {
                console.log(`   –ë–ª–æ–∫ ${blockId} –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–µ–∫—Å—Ç–∞ –≤–æ–ø—Ä–æ—Å–∞, —Ç–∞–±–ª–∏—Ü –∏–ª–∏ –ø–æ–ª–µ–π –¥–ª—è –≤–≤–æ–¥–∞. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º.`);
                displayAnswer(block, "(–≠—Ç–æ—Ç –±–ª–æ–∫ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è Gemini)", []);
                if (questionCounter < questionBlocks.length) await new Promise(resolve => setTimeout(resolve, 50));
                continue;
            }
             if (!mainQuestionText && (answerInputs.length > 0 || tableElement)) {
                 console.warn(`   –í –±–ª–æ–∫–µ ${blockId} –µ—Å—Ç—å –ø–æ–ª—è –≤–≤–æ–¥–∞/—Ç–∞–±–ª–∏—Ü–∞, –Ω–æ –Ω–µ –∏–∑–≤–ª–µ—á–µ–Ω –æ—Å–Ω–æ–≤–Ω–æ–π —Ç–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞. –ü—Ä–æ–º–ø—Ç –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ–ø–æ–ª–Ω—ã–º.`);
            }
            if (tableElement) {
                console.log(`   –ë–ª–æ–∫ ${blockId} —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–∞–±–ª–∏—Ü—É.`);
                tableData = { headers: [], rows: [] };
                const rows = Array.from(tableElement.querySelectorAll('tr'));
                if (rows.length > 0) {
                    const headerRow = rows[0];
                    const headerCells = Array.from(headerRow.querySelectorAll('th, td'));
                    tableData.headers = headerCells.map(cell => (cell.innerText || "").trim()).filter(h => h);
                    if (tableData.headers.length === 0 && headerCells.length > 0) {
                        tableData.headers = headerCells.map((_, i) => `–ö–æ–ª–æ–Ω–∫–∞ ${i + 1}`);
                    }
                     if (tableData.headers.length === 0 && headerCells.length === 0 && rows.length > 1) {}
                    const dataRows = rows.slice(1);
                    dataRows.forEach(dataRow => {
                        const cells = Array.from(dataRow.querySelectorAll('td'));
                        const rowData = {};
                        let rowHasInput = false;
                        let rowHasData = false;
                        (tableData.headers.length ? tableData.headers : cells.map((_,i) => `–ö–æ–ª–æ–Ω–∫–∞ ${i+1}`)).forEach((header, cellIndex) => {
                            const cell = cells[cellIndex];
                            if (!cell) {
                                rowData[header] = { type: 'data', value: '(—è—á–µ–π–∫–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç)' };
                                return;
                            }
                            const inputField = cell.querySelector(ANSWER_INPUT_SELECTOR);
                            if (inputField) {
                                rowHasInput = true;
                                const inputInfo = { type: 'input', dataTestId: inputField.getAttribute('data-test-id'), placeholder: inputField.getAttribute('placeholder') };
                                rowData[header] = inputInfo;
                                allInputsForDisplay.push(inputInfo);
                            } else {
                                const cellText = (cell.innerText || "").trim();
                                rowData[header] = { type: 'data', value: cellText || '(–ø—É—Å—Ç–æ)' };
                                if (cellText && cellText !== '(–ø—É—Å—Ç–æ)') rowHasData = true;
                            }
                        });
                        if(rowHasInput || rowHasData) tableData.rows.push(rowData);
                    });
                }
                let tableHasInputs = tableData.rows.some(r => Object.values(r).some(cell => cell.type === 'input'));
                if (!tableHasInputs && answerInputs.length > 0 && !answerInputs.some(inp => tableElement.contains(inp))) {
                    tableData = null; 
                } else if (!tableHasInputs && answerInputs.length === 0) {} 
                else if (!tableHasInputs && answerInputs.length > 0 && answerInputs.every(inp => tableElement.contains(inp))) {}
            }
            if (!tableData && answerInputs.length > 0) {
                console.log(`   –ë–ª–æ–∫ ${blockId} –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è –∫–∞–∫ —Å–ø–∏—Å–æ–∫ –ø–æ–ª–µ–π –≤–≤–æ–¥–∞.`);
                const allParagraphsInLexical = Array.from(block.querySelectorAll(`${LEXICAL_EDITOR_SELECTOR} > ${PARAGRAPH_SELECTOR}`));
                answerInputs.forEach(inputEl => {
                    const dataTestId = inputEl.getAttribute('data-test-id');
                    let contextText = "";
                    const parentPWithInput = inputEl.closest(PARAGRAPH_SELECTOR);
                    let contextFoundForThisInput = false;
                    if (parentPWithInput) {
                        let pTextBeforeInput = "";
                        for (const childNode of parentPWithInput.childNodes) {
                            if (childNode.nodeType === Node.ELEMENT_NODE && childNode.matches(DECORATOR_SPAN_WITH_INPUT_SELECTOR_QUERY)) break;
                            if (childNode.textContent.trim()) pTextBeforeInput += childNode.textContent.trim() + " ";
                        }
                        if (pTextBeforeInput.trim()) { contextText += `${pTextBeforeInput.trim()} `; contextFoundForThisInput = true; }
                        const indexOfParentP = allParagraphsInLexical.indexOf(parentPWithInput);
                        if (indexOfParentP > 0) {
                            for (let i = indexOfParentP - 1; i >= 0; i--) {
                                const prevP = allParagraphsInLexical[i];
                                if (prevP.querySelector(ANSWER_INPUT_SELECTOR) || !prevP.innerText.trim() || (mainQuestionText && mainQuestionText.includes(prevP.innerText.trim()))) break; 
                                if (!prevP.querySelector(DECORATOR_SPAN_SELECTOR)) { contextText = `${prevP.innerText.trim()} ` + contextText; contextFoundForThisInput = true; break; }
                            }
                        }
                    }
                    nonTableInputsData.push({ dataTestId, context: contextText || "(–Ω–µ—Ç —è–≤–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞)" });
                    allInputsForDisplay.push({dataTestId, type: 'input'});
                });
            }
            if (!tableData && nonTableInputsData.length === 0 && answerInputs.length > 0) {
                 answerInputs.forEach(inputEl => { allInputsForDisplay.push({dataTestId: inputEl.getAttribute('data-test-id'), type: 'input'}); });
            }
            if (!tableData && nonTableInputsData.length === 0 && answerInputs.length === 0) {
                displayAnswer(block, "(–≠—Ç–æ—Ç –±–ª–æ–∫ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –¥–ª—è —Ä–µ—à–µ–Ω–∏—è)", []);
                if (questionCounter < questionBlocks.length) await new Promise(resolve => setTimeout(resolve, 50));
                continue;
            }
            const prompt = buildPrompt(mainQuestionText || "(–ù–µ—Ç –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ –≤–æ–ø—Ä–æ—Å–∞)", tableData, nonTableInputsData);
            const geminiAnswer = await askGemini(prompt);
            displayAnswer(block, geminiAnswer, allInputsForDisplay);
            if (questionCounter < questionBlocks.length) await new Promise(resolve => setTimeout(resolve, 1000));
        }
        console.log('eMaktab Solver: –í—Å–µ –≤–æ–ø—Ä–æ—Å—ã –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã.');
        solveButton.textContent = '‚úÖ –ì–æ—Ç–æ–≤–æ! –†–µ—à–∏—Ç—å —Å–Ω–æ–≤–∞?';
        solveButton.disabled = false;
    }

    // --- –ö–Ω–æ–ø–∫–∞ –∑–∞–ø—É—Å–∫–∞ ---
    const solveButton = document.createElement('button');
    solveButton.textContent = 'üîÆ –†–µ—à–∏—Ç—å —Å Gemini';
    solveButton.style.position = 'fixed';
    solveButton.style.bottom = '20px';
    solveButton.style.right = '20px';
    solveButton.style.zIndex = '99999';
    solveButton.style.padding = '12px 20px';
    solveButton.style.backgroundColor = '#673ab7';
    solveButton.style.color = 'white';
    solveButton.style.border = 'none';
    solveButton.style.borderRadius = '8px';
    solveButton.style.cursor = 'pointer';
    solveButton.style.fontSize = '16px';
    solveButton.style.boxShadow = '0 4px 8px rgba(0,0,0,0.2)';
    solveButton.id = 'gemini-solve-button';

    solveButton.addEventListener('click', async () => {
        if (GEMINI_API_KEY === 'YOUR_GEMINI_API_KEY_HERE') {
            alert('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—Å—Ç–∞–≤—å—Ç–µ –≤–∞—à API –∫–ª—é—á Gemini –≤ —Å–∫—Ä–∏–ø—Ç!');
            return;
        }
        solveButton.disabled = true;
        solveButton.textContent = '‚è≥ –ó–∞–≥—Ä—É–∑–∫–∞...';
        await processQuestionsOnPage();
    });

    if (!document.getElementById('gemini-solve-button')) {
        document.body.appendChild(solveButton);
    }

})();
