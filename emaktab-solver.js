// –§–∞–π–ª: emaktab-solver.js
// –ü–æ–º–µ—Å—Ç–∏—Ç–µ —ç—Ç–æ—Ç —Ñ–∞–π–ª –≤ –≤–∞—à GitHub —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π

(async function() {
    'use strict';

    console.log('eMaktab Solver Script: –ó–∞–ø—É—â–µ–Ω.');

    // --- –ù–ê–°–¢–†–û–ô–ö–ò ---
    const GEMINI_API_KEY = 'AIzaSyB9vWInkcJrlGJmhRteOSthybGnSDUwfGw'; // !!! –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û –ó–ê–ú–ï–ù–ò –ù–ê –°–í–û–ô –ö–õ–Æ–ß !!!
    const GEMINI_API_URL = `https://generativelanguage.googleapis.com/v1beta/models/gemini-pro:generateContent?key=${GEMINI_API_KEY}`;

    // --- –°–µ–ª–µ–∫—Ç–æ—Ä—ã (–Ω–∞ –æ—Å–Ω–æ–≤–µ –Ω–∞—à–µ–≥–æ –∞–Ω–∞–ª–∏–∑–∞) ---
    const QUESTION_BLOCK_SELECTOR = '[data-test-id^="block-"]';
    const LEXICAL_EDITOR_SELECTOR = 'div[data-lexical-editor="true"]';
    const PARAGRAPH_SELECTOR = 'p';
    const TEXT_SPAN_SELECTOR = 'span[data-lexical-text="true"]:not(:empty)';

    const TABLE_SELECTOR_IN_BLOCK = 'table';
    const ANSWER_INPUT_SELECTOR = 'input[data-test-id^="answer-"]';

    const DECORATOR_SPAN_WITH_INPUT_SELECTOR_QUERY = `span[data-lexical-decorator="true"]:has(${ANSWER_INPUT_SELECTOR})`;
    const DECORATOR_SPAN_SELECTOR = 'span[data-lexical-decorator="true"]';

    // --- –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò ---

    async function askGemini(fullPrompt) {
        console.log("–ü—Ä–æ–º–ø—Ç –¥–ª—è Gemini:", fullPrompt);
        try {
            const response = await fetch(GEMINI_API_URL, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({
                    contents: [{ parts: [{ text: fullPrompt }] }],
                }),
            });

            if (!response.ok) {
                const errorData = await response.json();
                console.error('Gemini API Error:', response.status, errorData);
                const detailedError = errorData?.error?.message || JSON.stringify(errorData);
                return `–û–®–ò–ë–ö–ê API ${response.status}: ${detailedError}`;
            }

            const data = await response.json();
            if (data.candidates && data.candidates.length > 0 &&
                data.candidates[0].content && data.candidates[0].content.parts &&
                data.candidates[0].content.parts.length > 0) {
                return data.candidates[0].content.parts[0].text.trim();
            } else if (data.promptFeedback && data.promptFeedback.blockReason) {
                console.warn('Gemini API: –ó–∞–ø—Ä–æ—Å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.', data.promptFeedback);
                return `–ó–ê–ü–†–û–° –ó–ê–ë–õ–û–ö–ò–†–û–í–ê–ù: ${data.promptFeedback.blockReason}`;
            } else {
                console.warn('Gemini API: –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞.', data);
                return '–ù–µ—Ç –æ—Ç–≤–µ—Ç–∞ –æ—Ç Gemini';
            }
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ Gemini API:', error);
            return `–°–µ—Ç–µ–≤–∞—è –æ—à–∏–±–∫–∞ Gemini: ${error.message}`;
        }
    }

    function displayAnswer(questionBlockElement, geminiAnswer, answerInputsData = []) {
        const existingDisplay = questionBlockElement.querySelector('.gemini-answer-display');
        if (existingDisplay) {
            existingDisplay.remove();
        }

        const answerDisplay = document.createElement('div');
        answerDisplay.className = 'gemini-answer-display';
        answerDisplay.style.marginTop = '15px';
        answerDisplay.style.padding = '10px';
        answerDisplay.style.border = '1px dashed blue';
        answerDisplay.style.backgroundColor = '#f0f8ff';
        answerDisplay.style.whiteSpace = 'pre-wrap';
        answerDisplay.innerHTML = `<strong>ü§ñ Gemini:</strong><br>${geminiAnswer.replace(/\n/g, '<br>')}`;
        
        const lexicalEditor = questionBlockElement.querySelector(LEXICAL_EDITOR_SELECTOR);
        if (lexicalEditor) {
            lexicalEditor.insertAdjacentElement('afterend', answerDisplay);
        } else {
            questionBlockElement.appendChild(answerDisplay);
        }

        if (answerInputsData.length > 0 && geminiAnswer) {
            const lines = geminiAnswer.split('\n');
            lines.forEach(line => {
                const match = line.match(/(?:answer-|INPUT\s+)([a-zA-Z0-9_-]+)\s*:\s*(.*)/i);
                if (match) {
                    const dataTestId = "answer-" + match[1].replace(/^answer-/i, '');
                    const valueToInsert = match[2].trim();
                    const inputElement = questionBlockElement.querySelector(`input[data-test-id="${dataTestId}"]`);
                    if (inputElement) {
                        console.log(`–ü–æ–ø—ã—Ç–∫–∞ –≤—Å—Ç–∞–≤–∏—Ç—å "${valueToInsert}" –≤ input[data-test-id="${dataTestId}"]`);
                        inputElement.value = valueToInsert;
                        inputElement.style.backgroundColor = 'lightyellow';
                    } else {
                        console.warn(`–ù–µ –Ω–∞–π–¥–µ–Ω input –¥–ª—è data-test-id="${dataTestId}" –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏ –∑–Ω–∞—á–µ–Ω–∏—è.`);
                    }
                }
            });
        }
    }

    function extractMainQuestionText(block) {
        const lexicalEditor = block.querySelector(LEXICAL_EDITOR_SELECTOR);
        if (!lexicalEditor) return "";

        let mainQuestionSegments = [];
        const paragraphs = lexicalEditor.querySelectorAll(PARAGRAPH_SELECTOR);

        for (const p of paragraphs) {
            if (p.querySelector(ANSWER_INPUT_SELECTOR) ||
                (p.innerText.trim().startsWith("–û—Ç–≤–µ—Ç:") && p.querySelector(DECORATOR_SPAN_SELECTOR)) ||
                (/^\d+\)/.test(p.innerText.trim()) && p.querySelector(DECORATOR_SPAN_SELECTOR))
               ) {
                break; 
            }
            const textSpans = p.querySelectorAll(TEXT_SPAN_SELECTOR);
            textSpans.forEach(span => mainQuestionSegments.push(span.innerText.trim()));
        }
        return mainQuestionSegments.join(" ").trim();
    }

    function buildPrompt(mainQuestionText, tableData, nonTableInputsData) {
        let prompt = `–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Å–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å –∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤—å –æ—Ç–≤–µ—Ç—ã.
–ï—Å–ª–∏ —ç—Ç–æ —Ç–∞–±–ª–∏—Ü–∞, –∑–∞–ø–æ–ª–Ω–∏ —è—á–µ–π–∫–∏, –ø–æ–º–µ—á–µ–Ω–Ω—ã–µ –∫–∞–∫ [–ú–ï–°–¢–û –î–õ–Ø –û–¢–í–ï–¢–ê] –∏–ª–∏ [INPUT ...].
–ï—Å–ª–∏ —ç—Ç–æ —Å–ø–∏—Å–æ–∫ –≤–æ–ø—Ä–æ—Å–æ–≤, –¥–∞–π –æ—Ç–≤–µ—Ç –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø—É–Ω–∫—Ç–∞.
–û—Ç–≤–µ—Ç—ã –¥–∞–≤–∞–π –≤ —Ñ–æ—Ä–º–∞—Ç–µ "answer-X: –∑–Ω–∞—á–µ–Ω–∏–µ" –∏–ª–∏ "–º–µ—Ç–∫–∞: –∑–Ω–∞—á–µ–Ω–∏–µ", –≥–¥–µ X - –Ω–æ–º–µ—Ä –∏–∑ data-test-id.

–û—Å–Ω–æ–≤–Ω–æ–π –≤–æ–ø—Ä–æ—Å:
${mainQuestionText}
\n`;

        if (tableData) {
            prompt += "\n–¢–∞–±–ª–∏—Ü–∞ –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è:\n";
            // –û–¢–õ–ê–î–ö–ê: –≤—ã–≤–æ–¥–∏–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –∏ –ø–µ—Ä–≤—É—é —Å—Ç—Ä–æ–∫—É –¥–∞–Ω–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü—ã
            console.log("   DEBUG buildPrompt - tableData.headers:", JSON.stringify(tableData.headers));
            if (tableData.rows.length > 0) {
                console.log("   DEBUG buildPrompt - first tableData.row:", JSON.stringify(tableData.rows[0]));
            }

            prompt += tableData.headers.join('\t|\t') + '\n';
            prompt += '-'.repeat(tableData.headers.join('\t|\t').length) + '\n';
            
            tableData.rows.forEach((row, rowIndex) => {
                let rowStr = "";
                tableData.headers.forEach(header => {
                    const cellContent = row[header]; 
                    // –û–¢–õ–ê–î–ö–ê: –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç–∞–∫–æ–µ header –∏ cellContent
                    // console.log(`   DEBUG buildPrompt - row ${rowIndex}, header: "${header}", cellContent:`, cellContent);

                    if (cellContent) { 
                        if (cellContent.type === 'input') { // –û—à–∏–±–∫–∞ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –∑–¥–µ—Å—å
                            rowStr += `[INPUT ${cellContent.dataTestId || 'NO_ID'}]` + '\t|\t';
                        } else {
                            rowStr += (cellContent.value !== undefined ? cellContent.value : '(–ø—É—Å—Ç–æ)') + '\t|\t';
                        }
                    } else {
                        console.warn(`   WARN buildPrompt - row ${rowIndex}, header: "${header}" - cellContent is undefined!`);
                        rowStr += '(–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ –∑–∞–≥–æ–ª–æ–≤–∫—É)' + '\t|\t'; 
                    }
                });
                prompt += rowStr.slice(0, -3) + '\n'; 
            });
        } else if (nonTableInputsData.length > 0) {
            prompt += "\n–û—Ç–≤–µ—Ç—å –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–µ –ø—É–Ω–∫—Ç—ã:\n";
            nonTableInputsData.forEach(inputData => {
                prompt += `${inputData.context.trim()} [INPUT ${inputData.dataTestId}]\n`;
            });
        }
        return prompt;
    }

    async function processQuestionsOnPage() {
        const questionBlocks = document.querySelectorAll(QUESTION_BLOCK_SELECTOR);

        if (questionBlocks.length === 0) {
            console.log('eMaktab Solver: –ë–ª–æ–∫–∏ –≤–æ–ø—Ä–æ—Å–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.');
            alert('–ë–ª–æ–∫–∏ –≤–æ–ø—Ä–æ—Å–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã –≤ —Å–∫—Ä–∏–ø—Ç–µ.');
            return;
        }

        console.log(`eMaktab Solver: –ù–∞–π–¥–µ–Ω–æ –±–ª–æ–∫–æ–≤ –≤–æ–ø—Ä–æ—Å–æ–≤: ${questionBlocks.length}. –û–±—Ä–∞–±–æ—Ç–∫–∞...`);
        solveButton.textContent = `‚è≥ –û–±—Ä–∞–±–æ—Ç–∫–∞ (0/${questionBlocks.length})...`;

        let questionCounter = 0;
        for (const block of questionBlocks) {
            questionCounter++;
            const blockId = block.getAttribute('data-test-id');
            console.log(`\n--- –û–±—Ä–∞–±–æ—Ç–∫–∞ –±–ª–æ–∫–∞ #${questionCounter} (data-test-id: ${blockId}) ---`);
            solveButton.textContent = `‚è≥ –û–±—Ä–∞–±–æ—Ç–∫–∞ (${questionCounter}/${questionBlocks.length})...`;

            const mainQuestionText = extractMainQuestionText(block);
            if (!mainQuestionText && !block.querySelector(ANSWER_INPUT_SELECTOR) && !block.querySelector(TABLE_SELECTOR_IN_BLOCK)) {
                console.log(`   –ë–ª–æ–∫ ${blockId} –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–µ–∫—Å—Ç–∞ –≤–æ–ø—Ä–æ—Å–∞, —Ç–∞–±–ª–∏—Ü –∏–ª–∏ –ø–æ–ª–µ–π –¥–ª—è –≤–≤–æ–¥–∞. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º.`);
                displayAnswer(block, "(–≠—Ç–æ—Ç –±–ª–æ–∫ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è Gemini)", []);
                continue;
            }
            if (!mainQuestionText && (block.querySelector(ANSWER_INPUT_SELECTOR) || block.querySelector(TABLE_SELECTOR_IN_BLOCK))) {
                 console.warn(`   –í –±–ª–æ–∫–µ ${blockId} –µ—Å—Ç—å –ø–æ–ª—è –≤–≤–æ–¥–∞/—Ç–∞–±–ª–∏—Ü–∞, –Ω–æ –Ω–µ –∏–∑–≤–ª–µ—á–µ–Ω –æ—Å–Ω–æ–≤–Ω–æ–π —Ç–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞. –ü—Ä–æ–º–ø—Ç –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ–ø–æ–ª–Ω—ã–º.`);
            }


            const tableElement = block.querySelector(TABLE_SELECTOR_IN_BLOCK);
            const answerInputs = Array.from(block.querySelectorAll(ANSWER_INPUT_SELECTOR));
            let tableData = null;
            let nonTableInputsData = [];
            let allInputsForDisplay = [];

            if (tableElement) {
                console.log(`   –ë–ª–æ–∫ ${blockId} —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–∞–±–ª–∏—Ü—É.`);
                tableData = { headers: [], rows: [] };
                const rows = Array.from(tableElement.querySelectorAll('tr'));

                if (rows.length > 0) {
                    const headerRow = rows[0];
                    const headerCells = Array.from(headerRow.querySelectorAll('th, td'));
                    // –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º, —á—Ç–æ –∑–∞–≥–æ–ª–æ–≤–∫–∏ - —ç—Ç–æ —Å—Ç—Ä–æ–∫–∏ –∏ –Ω–µ –ø—É—Å—Ç—ã–µ
                    tableData.headers = headerCells.map(cell => (cell.innerText || "").trim()).filter(h => h);

                    if (tableData.headers.length === 0 && headerCells.length > 0) {
                        console.warn(`   –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–ï: –ó–∞–≥–æ–ª–æ–≤–∫–∏ —Ç–∞–±–ª–∏—Ü—ã –≤ –±–ª–æ–∫–µ ${blockId} –ø—É—Å—Ç—ã –∏–ª–∏ —Å–æ–¥–µ—Ä–∂–∞—Ç —Ç–æ–ª—å–∫–æ –ø—Ä–æ–±–µ–ª—ã. –ò—Å–ø–æ–ª—å–∑—É–µ–º '–ö–æ–ª–æ–Ω–∫–∞ X'.`);
                        tableData.headers = headerCells.map((_, i) => `–ö–æ–ª–æ–Ω–∫–∞ ${i + 1}`);
                    }
                     if (tableData.headers.length === 0 && headerCells.length === 0 && rows.length > 1) {
                        console.warn(`   –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–ï: –ù–µ—Ç —Ç–µ–≥–æ–≤ th/td –≤ –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–æ–∫–µ —Ç–∞–±–ª–∏—Ü—ã –±–ª–æ–∫–∞ ${blockId}, –Ω–æ –µ—Å—Ç—å –¥—Ä—É–≥–∏–µ —Å—Ç—Ä–æ–∫–∏. –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ç–∞–±–ª–∏—Ü—ã –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ–≤–µ—Ä–Ω–æ–π.`);
                    }


                    const dataRows = rows.slice(1);
                    dataRows.forEach(dataRow => {
                        const cells = Array.from(dataRow.querySelectorAll('td'));
                        const rowData = {};
                        let rowHasInput = false;
                        let rowHasData = false;

                        tableData.headers.forEach((header, cellIndex) => {
                            const cell = cells[cellIndex];
                            if (!cell) {
                                rowData[header] = { type: 'data', value: '(—è—á–µ–π–∫–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç)' };
                                return;
                            }
                            
                            const inputField = cell.querySelector(ANSWER_INPUT_SELECTOR);
                            if (inputField) {
                                rowHasInput = true;
                                const inputInfo = {
                                    type: 'input',
                                    dataTestId: inputField.getAttribute('data-test-id'),
                                    placeholder: inputField.getAttribute('placeholder')
                                };
                                rowData[header] = inputInfo;
                                allInputsForDisplay.push(inputInfo);
                            } else {
                                const cellText = (cell.innerText || "").trim();
                                rowData[header] = { type: 'data', value: cellText || '(–ø—É—Å—Ç–æ)' };
                                if (cellText) rowHasData = true;
                            }
                        });
                        // –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç—Ä–æ–∫—É, —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω–∞ —Å–æ–¥–µ—Ä–∂–∏—Ç –∏–Ω–ø—É—Ç –∏–ª–∏ –∫–∞–∫–∏–µ-—Ç–æ –¥–∞–Ω–Ω—ã–µ
                        if(rowHasInput || rowHasData) {
                            tableData.rows.push(rowData);
                        }
                    });
                }
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –ª–∏ —ç—Ç–æ "—Ç–∞–±–ª–∏—á–Ω—ã–π –≤–æ–ø—Ä–æ—Å —Å –∏–Ω–ø—É—Ç–∞–º–∏"
                let tableHasInputs = tableData.rows.some(r => Object.values(r).some(cell => cell.type === 'input'));
                if (!tableHasInputs && answerInputs.length > 0 && !answerInputs.some(inp => tableElement.contains(inp))) {
                    // –ï—Å–ª–∏ –≤ —Ç–∞–±–ª–∏—Ü–µ –Ω–µ –Ω–∞—à–ª–∏ –∏–Ω–ø—É—Ç–æ–≤, –Ω–æ –æ–Ω–∏ –µ—Å—Ç—å –≤ –±–ª–æ–∫–µ –≤–Ω–µ —Ç–∞–±–ª–∏—Ü—ã
                    console.log(`   –¢–∞–±–ª–∏—Ü–∞ –≤ –±–ª–æ–∫–µ ${blockId} –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –ø–æ–ª–µ–π –≤–≤–æ–¥–∞, –Ω–æ –æ–Ω–∏ –µ—Å—Ç—å –≤–Ω–µ —Ç–∞–±–ª–∏—Ü—ã. –°—á–∏—Ç–∞–µ–º —ç—Ç–æ –Ω–µ —Ç–∞–±–ª–∏—á–Ω—ã–º –≤–æ–ø—Ä–æ—Å–æ–º.`);
                    tableData = null; 
                } else if (!tableHasInputs && answerInputs.length === 0) {
                     console.log(`   –¢–∞–±–ª–∏—Ü–∞ –≤ –±–ª–æ–∫–µ ${blockId} –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –ø–æ–ª–µ–π –≤–≤–æ–¥–∞ (–∏ –≤ –±–ª–æ–∫–µ –∏—Ö —Ç–æ–∂–µ –Ω–µ—Ç). –≠—Ç–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞.`);
                     // –û—Å—Ç–∞–≤–ª—è–µ–º tableData, –Ω–æ –ø—Ä–æ–º–ø—Ç –¥–ª—è Gemini –Ω–µ –±—É–¥–µ—Ç –ø—Ä–æ—Å–∏—Ç—å –∑–∞–ø–æ–ª–Ω—è—Ç—å –µ–µ.
                } else if (!tableHasInputs && answerInputs.length > 0 && answerInputs.every(inp => tableElement.contains(inp))) {
                    console.warn(`   –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–ï: –í—Å–µ –∏–Ω–ø—É—Ç—ã –±–ª–æ–∫–∞ ${blockId} –Ω–∞—Ö–æ–¥—è—Ç—Å—è –≤ —Ç–∞–±–ª–∏—Ü–µ, –Ω–æ –ø–∞—Ä—Å–µ—Ä –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–∏–ª –∏—Ö –∫–∞–∫ –∏–Ω–ø—É—Ç—ã —Ç–∞–±–ª–∏—Ü—ã. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏–∫—É.`);
                    // –í —ç—Ç–æ–º —Å–ª—É—á–∞–µ, –≤–æ–∑–º–æ–∂–Ω–æ, —Å—Ç–æ–∏—Ç —Å—á–∏—Ç–∞—Ç—å —ç—Ç–æ –Ω–µ—Ç–∞–±–ª–∏—á–Ω—ã–º –≤–æ–ø—Ä–æ—Å–æ–º, —á—Ç–æ–±—ã –∏–Ω–ø—É—Ç—ã –æ–±—Ä–∞–±–æ—Ç–∞–ª–∏—Å—å.
                    // tableData = null; // –†–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å, –µ—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –∫–∞–∫ –Ω–µ—Ç–∞–±–ª–∏—á–Ω—ã–π
                }
            }
            
            if (!tableData && answerInputs.length > 0) {
                // ... (–ª–æ–≥–∏–∫–∞ –¥–ª—è –Ω–µ—Ç–∞–±–ª–∏—á–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ –æ—Å—Ç–∞–µ—Ç—Å—è —Ç–∞–∫–æ–π –∂–µ)
            }

            // ... (–æ—Å—Ç–∞–ª—å–Ω–∞—è —á–∞—Å—Ç—å —Ñ—É–Ω–∫—Ü–∏–∏ processQuestionsOnPage, buildPrompt, displayAnswer)
            // ... (–∫–Ω–æ–ø–∫–∞)

            if (!tableData && nonTableInputsData.length === 0 && answerInputs.length === 0) {
                console.log(`   –ë–ª–æ–∫ ${blockId} –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–∞–±–ª–∏—Ü –∏–ª–∏ –ø–æ–ª–µ–π –¥–ª—è –≤–≤–æ–¥–∞, –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã—Ö –¥–ª—è Gemini. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É.`);
                displayAnswer(block, "(–≠—Ç–æ—Ç –±–ª–æ–∫ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –¥–ª—è —Ä–µ—à–µ–Ω–∏—è)", []);
                continue;
            }

            const prompt = buildPrompt(mainQuestionText || "(–ù–µ—Ç –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ –≤–æ–ø—Ä–æ—Å–∞)", tableData, nonTableInputsData);
            const geminiAnswer = await askGemini(prompt);
            displayAnswer(block, geminiAnswer, allInputsForDisplay);

            if (questionCounter < questionBlocks.length) {
                await new Promise(resolve => setTimeout(resolve, 1000));
            }
        }
        console.log('eMaktab Solver: –í—Å–µ –≤–æ–ø—Ä–æ—Å—ã –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã.');
        solveButton.textContent = '‚úÖ –ì–æ—Ç–æ–≤–æ! –†–µ—à–∏—Ç—å —Å–Ω–æ–≤–∞?';
        solveButton.disabled = false;
    }

    const solveButton = document.createElement('button');
    solveButton.textContent = 'üîÆ –†–µ—à–∏—Ç—å —Å Gemini';
    solveButton.style.position = 'fixed';
    solveButton.style.bottom = '20px';
    solveButton.style.right = '20px';
    solveButton.style.zIndex = '99999';
    solveButton.style.padding = '12px 20px';
    solveButton.style.backgroundColor = '#673ab7';
    solveButton.style.color = 'white';
    solveButton.style.border = 'none';
    solveButton.style.borderRadius = '8px';
    solveButton.style.cursor = 'pointer';
    solveButton.style.fontSize = '16px';
    solveButton.style.boxShadow = '0 4px 8px rgba(0,0,0,0.2)';
    solveButton.id = 'gemini-solve-button';

    solveButton.addEventListener('click', async () => {
        if (GEMINI_API_KEY === 'YOUR_GEMINI_API_KEY_HERE') {
            alert('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—Å—Ç–∞–≤—å—Ç–µ –≤–∞—à API –∫–ª—é—á Gemini –≤ —Å–∫—Ä–∏–ø—Ç!');
            return;
        }
        solveButton.disabled = true;
        solveButton.textContent = '‚è≥ –ó–∞–≥—Ä—É–∑–∫–∞...';
        await processQuestionsOnPage();
    });

    if (!document.getElementById('gemini-solve-button')) {
        document.body.appendChild(solveButton);
    }

})();
